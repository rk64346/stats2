{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0656f8d8-3ca0-4b1f-b70f-4ae4c88f38bd",
   "metadata": {},
   "source": [
    "Q1. What are the three measures of central tendency?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeb83b4a-4e4b-49c7-b609-31fee03017ae",
   "metadata": {},
   "source": [
    "the three measures of centeral tendeny is mean ,median and mode "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff59cd4-971d-43ef-8ad4-782eaf0c262c",
   "metadata": {},
   "source": [
    "Q2. What is the difference between the mean, median, and mode? How are they used to measure the\n",
    "central tendency of a dataset?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aaa5c7c6-e94c-4eb0-9567-c36053f5bea9",
   "metadata": {},
   "source": [
    "#the dufference we can discuss one by one:\n",
    "    #1 mean: it is the avg of the given data\n",
    "    #for example x = {1,1,2,2,3,3,4,5,5,6}\n",
    "   # popULATION MEAN(u) = xi/N\n",
    "                          total no. added/total no.present will give the menan\n",
    "    here, x = {1,1,2,2,3,3,4,5,5,6}/10 = 32/10 = 3.2\n",
    "    \n",
    "    #2 median:   # if even count: x = {1,2,2,3,4,5}  ,take the centeral element and divide by total centeral element no,\n",
    "      here, x = {1,2,2,3,4,5} = 2+3/2 = 2.5\n",
    "      #if odd count:\n",
    "      1,2,3,4,5  = 3/1 = 1  , \"\"median is used to find the the central tendency to handle outliers\"\"\n",
    "    \n",
    "    \n",
    "    #mode: maximum ocuuring element(frequency maximum),\n",
    "   x = { 1,2,3,4,5,6,7,7,8,8,8,9,9} , find the max ocuuring element in this ,\n",
    "       here, 8 is mode of this data set\n",
    "       \n",
    "       useu; used emensely in EDA, and feature engeenering, or to to fing  the missing data\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "7c913a87-33fa-4341-9f78-645f8c026062",
   "metadata": {},
   "source": [
    "Q3. Measure the three measures of central tendency for the given height data:\n",
    "[178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9c88697f-c9c6-4913-b449-3a2516830543",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics\n",
    "\n",
    "h = [178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4a7c5e1e-a499-47d3-b0cb-c50e740689c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "177.01875"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " statistics.mean(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4847ab99-eaa0-4aa6-a8d6-e452a980803a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "177.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.median(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "42fd7182-7a17-4bee-8b1d-ff86212bdcc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "178"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.mode(h)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2ba0213-8ac0-423b-8a51-772f06c607da",
   "metadata": {},
   "source": [
    "Q4. Find the standard deviation for the given data:\n",
    "[178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b5be5422-2d9f-49d2-9894-a28fe9a4dbcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "data =  [178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "436d53f1-807e-4686-b6cd-e289bffe3d60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8472389305844188"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.stdev(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7d3dd01-d935-42f1-bad3-8c55f0f2d0c7",
   "metadata": {},
   "source": [
    "Q5. How are measures of dispersion such as range, variance, and standard deviation used to describe\n",
    "the spread of a dataset? Provide an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "00fdcf53-8624-4fbf-93cd-cb93b4fac62d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data =  [178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d0960954-6625-47c4-be0d-4ec540db4c78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.4122916666666674"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.variance(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f7a63c1f-bd30-4b29-8485-95fa5b76d107",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.8472389305844188"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "statistics.stdev(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ef909850-714c-4bb3-86b4-f592672d25cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "175\n",
      "176\n",
      "177\n",
      "178\n",
      "179\n"
     ]
    }
   ],
   "source": [
    "data =  {178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5}\n",
    "\n",
    "for i in range(175,180):\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17dc6aae-cf46-4e12-87c2-b113787ba3b5",
   "metadata": {},
   "source": [
    "Q6. What is a Venn diagram?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3bfdef18-1802-49e0-9e55-bb93662f91ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib_venn import venn2\n",
    "import matplotlib.pyplot as plt\n",
    "data1 =  {178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5}\n",
    "data2 = {178,177,176,177,178.2,178,175,179,180,175,178.9,176.2,177,172.5,178,176.5}\n",
    "venn2([data1, data2], ('data 1', 'data 2'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "19930cd2-f454-41ad-84ad-fff6699d5284",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting matplotlib-venn\n",
      "  Downloading matplotlib-venn-0.11.9.tar.gz (30 kB)\n",
      "  Installing build dependencies ... \u001b[?25ldone\n",
      "\u001b[?25h  Getting requirements to build wheel ... \u001b[?25ldone\n",
      "\u001b[?25h  Installing backend dependencies ... \u001b[?25ldone\n",
      "\u001b[?25h  Preparing metadata (pyproject.toml) ... \u001b[?25ldone\n",
      "\u001b[?25hRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from matplotlib-venn) (1.23.5)\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from matplotlib-venn) (1.9.3)\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from matplotlib-venn) (3.6.2)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (3.0.9)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (1.4.4)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (0.11.0)\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (22.0)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (9.2.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (1.0.6)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (2.8.2)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->matplotlib-venn) (4.38.0)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->matplotlib-venn) (1.16.0)\n",
      "Building wheels for collected packages: matplotlib-venn\n",
      "  Building wheel for matplotlib-venn (pyproject.toml) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for matplotlib-venn: filename=matplotlib_venn-0.11.9-py3-none-any.whl size=32999 sha256=3bad62b5cb5744c25a653d5118dda53021653aabbe497169005f1e287df52c04\n",
      "  Stored in directory: /home/jovyan/.cache/pip/wheels/ab/a1/93/9cbd4e11e6964009387cd595450dfcbb6998e15dfbaa5805dd\n",
      "Successfully built matplotlib-venn\n",
      "Installing collected packages: matplotlib-venn\n",
      "Successfully installed matplotlib-venn-0.11.9\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install matplotlib-venn\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e3d8433-0df8-4156-beb0-39f6094642aa",
   "metadata": {},
   "source": [
    "Q7. For the two given sets A = (2,3,4,5,6,7) & B = (0,2,6,8,10). Find:\n",
    "(i) A B\n",
    "(ii) A ⋃ B"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df7ada71-e5f2-4a06-b80c-36b2dfcbb6bb",
   "metadata": {},
   "source": [
    "A = (2,3,4,5,6,7) \n",
    "B = (0,2,6,8,10)\n",
    "A∩B={2,6},A∪B={0,2,3,4,5,6,7,8,10}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e0fd859-43ac-4a03-ad25-a308d152cb10",
   "metadata": {},
   "source": [
    "Q8. What do you understand about skewness in data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df3713dc-df06-46e0-b03b-3a5a8856913e",
   "metadata": {},
   "outputs": [],
   "source": [
    "skewness means frequency of data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
